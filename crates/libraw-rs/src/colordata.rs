use libraw_sys::*;

use crate::utils::string_from;

pub struct ColorData {
    pub curve: [u16; 65536],
    pub cblack: [u32; 4104],
    pub black: u32,
    pub data_maximum: u32,
    pub maximum: u32,
    pub linear_max: [i64; 4],
    pub fmaximum: f32,
    pub fnorm: f32,
    pub white: [[u16; 8]; 8],
    pub cam_mul: [f32; 4],
    pub pre_mul: [f32; 4],
    pub cmatrix: [[f32; 4]; 3],
    pub ccm: [[f32; 4]; 3],
    pub rgb_cam: [[f32; 4]; 3],
    pub cam_xyz: [[f32; 3]; 4],
    pub phase_one_data: ph1_t,
    pub flash_used: f32,
    pub canon_ev: f32,
    pub model2: Option<String>,
    pub unique_camera_model: Option<String>,
    pub localized_camera_model: Option<String>,
    pub image_unique_id: Option<String>,
    pub raw_data_unique_id: Option<String>,
    pub original_raw_file_name: Option<String>,
    pub profile: *mut std::ffi::c_void,
    pub profile_length: u32,
    pub black_stat: [u32; 8],
    pub dng_color: [libraw_dng_color_t; 2],
    pub dng_levels: libraw_dng_levels_t,
    pub wb_coeffs: [[i32; 4]; 256],
    pub wbct_coeffs: [[f32; 5]; 64],
    pub as_shot_wb_applied: i32,
    pub p1_color: [libraw_P1_color_t; 2],
    pub raw_bps: u32,
    pub exif_color_space: i32,
}

impl From<libraw_colordata_t> for ColorData {
    fn from(value: libraw_colordata_t) -> Self {
        ColorData {
            curve: value.curve,
            cblack: value.cblack,
            black: value.black,
            data_maximum: value.data_maximum,
            maximum: value.maximum,
            linear_max: value.linear_max,
            fmaximum: value.fmaximum,
            fnorm: value.fnorm,
            white: value.white,
            cam_mul: value.cam_mul,
            pre_mul: value.pre_mul,
            cmatrix: value.cmatrix,
            ccm: value.ccm,
            rgb_cam: value.rgb_cam,
            cam_xyz: value.cam_xyz,
            phase_one_data: value.phase_one_data,
            flash_used: value.flash_used,
            canon_ev: value.canon_ev,
            model2: string_from(value.model2.as_ptr()),
            unique_camera_model: string_from(value.UniqueCameraModel.as_ptr()),
            localized_camera_model: string_from(value.LocalizedCameraModel.as_ptr()),
            image_unique_id: string_from(value.ImageUniqueID.as_ptr()),
            raw_data_unique_id: string_from(value.RawDataUniqueID.as_ptr()),
            original_raw_file_name: string_from(value.OriginalRawFileName.as_ptr()),
            profile: value.profile,
            profile_length: value.profile_length,
            black_stat: value.black_stat,
            dng_color: value.dng_color,
            dng_levels: value.dng_levels,
            wb_coeffs: value.WB_Coeffs,
            wbct_coeffs: value.WBCT_Coeffs,
            as_shot_wb_applied: value.as_shot_wb_applied,
            p1_color: value.P1_color,
            raw_bps: value.raw_bps,
            exif_color_space: value.ExifColorSpace,
        }
    }
}
